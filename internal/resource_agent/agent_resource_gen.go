// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_agent

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func AgentResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"ai_instructions": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"allowed_groups": schema.ListAttribute{
				ElementType: types.StringType,
				Optional:    true,
				Computed:    true,
			},
			"allowed_users": schema.ListAttribute{
				ElementType: types.StringType,
				Optional:    true,
				Computed:    true,
			},
			"description": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"environment_variables": schema.MapAttribute{
				ElementType: types.StringType,
				Optional:    true,
				Computed:    true,
			},
			"id": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "ID of agent",
				MarkdownDescription: "ID of agent",
			},
			"image": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"integrations": schema.ListAttribute{
				ElementType: types.StringType,
				Optional:    true,
				Computed:    true,
			},
			"links": schema.ListAttribute{
				ElementType: types.StringType,
				Optional:    true,
				Computed:    true,
			},
			"llm_model": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"metadata": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"created_at": schema.StringAttribute{
						Optional: true,
						Computed: true,
					},
					"last_updated": schema.StringAttribute{
						Optional: true,
						Computed: true,
					},
					"user_created": schema.StringAttribute{
						Optional: true,
						Computed: true,
					},
					"user_last_updated": schema.StringAttribute{
						Optional: true,
						Computed: true,
					},
				},
				CustomType: MetadataType{
					ObjectType: types.ObjectType{
						AttrTypes: MetadataValue{}.AttributeTypes(ctx),
					},
				},
				Optional: true,
				Computed: true,
			},
			"name": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"owners": schema.ListAttribute{
				ElementType: types.StringType,
				Optional:    true,
				Computed:    true,
			},
			"runners": schema.ListAttribute{
				ElementType: types.StringType,
				Optional:    true,
				Computed:    true,
			},
			"secrets": schema.ListAttribute{
				ElementType: types.StringType,
				Optional:    true,
				Computed:    true,
			},
			"starters": schema.ListAttribute{
				ElementType: types.StringType,
				Optional:    true,
				Computed:    true,
			},
			"uuid": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
		},
	}
}

type AgentModel struct {
	AiInstructions       types.String  `tfsdk:"ai_instructions"`
	AllowedGroups        types.List    `tfsdk:"allowed_groups"`
	AllowedUsers         types.List    `tfsdk:"allowed_users"`
	Description          types.String  `tfsdk:"description"`
	EnvironmentVariables types.Map     `tfsdk:"environment_variables"`
	Id                   types.String  `tfsdk:"id"`
	Image                types.String  `tfsdk:"image"`
	Integrations         types.List    `tfsdk:"integrations"`
	Links                types.List    `tfsdk:"links"`
	LlmModel             types.String  `tfsdk:"llm_model"`
	Metadata             MetadataValue `tfsdk:"metadata"`
	Name                 types.String  `tfsdk:"name"`
	Owners               types.List    `tfsdk:"owners"`
	Runners              types.List    `tfsdk:"runners"`
	Secrets              types.List    `tfsdk:"secrets"`
	Starters             types.List    `tfsdk:"starters"`
	Uuid                 types.String  `tfsdk:"uuid"`
}

var _ basetypes.ObjectTypable = MetadataType{}

type MetadataType struct {
	basetypes.ObjectType
}

func (t MetadataType) Equal(o attr.Type) bool {
	other, ok := o.(MetadataType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t MetadataType) String() string {
	return "MetadataType"
}

func (t MetadataType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return nil, diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.StringValue, was: %T`, createdAtAttribute))
	}

	lastUpdatedAttribute, ok := attributes["last_updated"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`last_updated is missing from object`)

		return nil, diags
	}

	lastUpdatedVal, ok := lastUpdatedAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`last_updated expected to be basetypes.StringValue, was: %T`, lastUpdatedAttribute))
	}

	userCreatedAttribute, ok := attributes["user_created"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`user_created is missing from object`)

		return nil, diags
	}

	userCreatedVal, ok := userCreatedAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`user_created expected to be basetypes.StringValue, was: %T`, userCreatedAttribute))
	}

	userLastUpdatedAttribute, ok := attributes["user_last_updated"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`user_last_updated is missing from object`)

		return nil, diags
	}

	userLastUpdatedVal, ok := userLastUpdatedAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`user_last_updated expected to be basetypes.StringValue, was: %T`, userLastUpdatedAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return MetadataValue{
		CreatedAt:       createdAtVal,
		LastUpdated:     lastUpdatedVal,
		UserCreated:     userCreatedVal,
		UserLastUpdated: userLastUpdatedVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewMetadataValueNull() MetadataValue {
	return MetadataValue{
		state: attr.ValueStateNull,
	}
}

func NewMetadataValueUnknown() MetadataValue {
	return MetadataValue{
		state: attr.ValueStateUnknown,
	}
}

func NewMetadataValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (MetadataValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing MetadataValue Attribute Value",
				"While creating a MetadataValue value, a missing attribute value was detected. "+
					"A MetadataValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MetadataValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid MetadataValue Attribute Type",
				"While creating a MetadataValue value, an invalid attribute value was detected. "+
					"A MetadataValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MetadataValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("MetadataValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra MetadataValue Attribute Value",
				"While creating a MetadataValue value, an extra attribute value was detected. "+
					"A MetadataValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra MetadataValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewMetadataValueUnknown(), diags
	}

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return NewMetadataValueUnknown(), diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.StringValue, was: %T`, createdAtAttribute))
	}

	lastUpdatedAttribute, ok := attributes["last_updated"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`last_updated is missing from object`)

		return NewMetadataValueUnknown(), diags
	}

	lastUpdatedVal, ok := lastUpdatedAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`last_updated expected to be basetypes.StringValue, was: %T`, lastUpdatedAttribute))
	}

	userCreatedAttribute, ok := attributes["user_created"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`user_created is missing from object`)

		return NewMetadataValueUnknown(), diags
	}

	userCreatedVal, ok := userCreatedAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`user_created expected to be basetypes.StringValue, was: %T`, userCreatedAttribute))
	}

	userLastUpdatedAttribute, ok := attributes["user_last_updated"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`user_last_updated is missing from object`)

		return NewMetadataValueUnknown(), diags
	}

	userLastUpdatedVal, ok := userLastUpdatedAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`user_last_updated expected to be basetypes.StringValue, was: %T`, userLastUpdatedAttribute))
	}

	if diags.HasError() {
		return NewMetadataValueUnknown(), diags
	}

	return MetadataValue{
		CreatedAt:       createdAtVal,
		LastUpdated:     lastUpdatedVal,
		UserCreated:     userCreatedVal,
		UserLastUpdated: userLastUpdatedVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewMetadataValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) MetadataValue {
	object, diags := NewMetadataValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewMetadataValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t MetadataType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewMetadataValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewMetadataValueUnknown(), nil
	}

	if in.IsNull() {
		return NewMetadataValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewMetadataValueMust(MetadataValue{}.AttributeTypes(ctx), attributes), nil
}

func (t MetadataType) ValueType(ctx context.Context) attr.Value {
	return MetadataValue{}
}

var _ basetypes.ObjectValuable = MetadataValue{}

type MetadataValue struct {
	CreatedAt       basetypes.StringValue `tfsdk:"created_at"`
	LastUpdated     basetypes.StringValue `tfsdk:"last_updated"`
	UserCreated     basetypes.StringValue `tfsdk:"user_created"`
	UserLastUpdated basetypes.StringValue `tfsdk:"user_last_updated"`
	state           attr.ValueState
}

func (v MetadataValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["created_at"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["last_updated"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["user_created"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["user_last_updated"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.CreatedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["created_at"] = val

		val, err = v.LastUpdated.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["last_updated"] = val

		val, err = v.UserCreated.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["user_created"] = val

		val, err = v.UserLastUpdated.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["user_last_updated"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v MetadataValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v MetadataValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v MetadataValue) String() string {
	return "MetadataValue"
}

func (v MetadataValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"created_at":        basetypes.StringType{},
			"last_updated":      basetypes.StringType{},
			"user_created":      basetypes.StringType{},
			"user_last_updated": basetypes.StringType{},
		},
		map[string]attr.Value{
			"created_at":        v.CreatedAt,
			"last_updated":      v.LastUpdated,
			"user_created":      v.UserCreated,
			"user_last_updated": v.UserLastUpdated,
		})

	return objVal, diags
}

func (v MetadataValue) Equal(o attr.Value) bool {
	other, ok := o.(MetadataValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.CreatedAt.Equal(other.CreatedAt) {
		return false
	}

	if !v.LastUpdated.Equal(other.LastUpdated) {
		return false
	}

	if !v.UserCreated.Equal(other.UserCreated) {
		return false
	}

	if !v.UserLastUpdated.Equal(other.UserLastUpdated) {
		return false
	}

	return true
}

func (v MetadataValue) Type(ctx context.Context) attr.Type {
	return MetadataType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v MetadataValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"created_at":        basetypes.StringType{},
		"last_updated":      basetypes.StringType{},
		"user_created":      basetypes.StringType{},
		"user_last_updated": basetypes.StringType{},
	}
}
